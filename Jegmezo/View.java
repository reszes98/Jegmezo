package Jegmezo;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : View.java
//  @ Date : 2020. 05. 05.
//  @ Author : 
//
//


import java.awt.*;
import java.util.ArrayList;
import java.util.List;

import javax.swing.*;

/**
 * @author Henrik
 * Pálya létrehozását és a képek rendelését oldja meg
 */
public class View {
	private JFrame frame;
	private JPanel jatekPanel;
	private JPanel jegmezoPanel;
	private List<JComboBox<Object>> taskak=new ArrayList<JComboBox<Object>>();
	private JComboBox<Object> aktTaska;
	private JPanel iranyPanel;
	private JPanel taskaPanel;
	private JButton HasznalButton;
	private JButton FelveszButton;
	private JButton KepessegButton;
	private JButton BalraButton;
	private JButton JobbraButton;
	private JButton LepButton;
	private JButton korvegeButton;
	private JButton asasButton;
	private JLabel testho;
	private JLabel munka;
	private JLabel tartokepesseg;
	private JLabel hovihar;
	private List<Drawable> drawable=new ArrayList<Drawable>();
	private List<Drawable> drawjatekos=new ArrayList<Drawable>();
	private List<Drawable> drawmaci=new ArrayList<Drawable>();
	private List<Drawable> drawtargy=new ArrayList<Drawable>();
	private List<Drawable> drawvedelem=new ArrayList<Drawable>();
	private List<Drawable> drawirany=new ArrayList<Drawable>();
	private Controller controller;
	Menu menu;
	/**
	 * @param c controller
	 * @param m menu
	 */
	public View(Controller c, Menu m) {
		controller=c; menu=m;
		inicializalas();
		
	}
	/**
	 * komponensek létrehozása
	 */
	public void inicializalas() {
		aktTaska=new JComboBox<Object>();
		munka=new JLabel();
		testho=new JLabel();
		munka.setText("Játékos munkái:");
		testho.setText("Játékos testhõje:");
		tartokepesseg=new JLabel();
		hovihar=new JLabel();
		setButtons();
		setPanels();
		frame=new JFrame("Jég-veled!");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);			
	    frame.setPreferredSize(new Dimension(940, 730));																						
	   
	    frame.setLayout(new BorderLayout());
	    
	    frame.add(BorderLayout.CENTER, jegmezoPanel);
		frame.add(BorderLayout.EAST, iranyPanel);
		frame.add(BorderLayout.NORTH, jatekPanel);
		frame.add(BorderLayout.WEST, taskaPanel);
		
		frame.setResizable(false);										
		frame.setVisible(true);
		frame.pack();
		frame.setLocationRelativeTo(null);
	}
	
	
	
	
	/**
	 * @param d drawable, kirajzolandó objektum hozzáadás
	 */
	public void addDrawable(Drawable d) {
		drawable.add(d);
	}
	
	/**
	 * képernyõ újra rajzol
	 */
	public void drawAll() {
		jegmezoPanel.repaint();
		iranyPanel.repaint();
		jatekPanel.repaint();
		taskaPanel.repaint();
	}
	
	/**
	 * gombok létrehozása
	 */
	public void setButtons() {
		HasznalButton=new JButton("Tárgy Használ");
		HasznalButton.addActionListener(controller.new TargyActionListener(aktTaska));
		FelveszButton=new JButton("Felvesz");
		FelveszButton.addActionListener(controller.new TargyActionListener(aktTaska));
		KepessegButton=new JButton("Képesség Használ");
		KepessegButton.addActionListener(controller.new GombokActionListener());
		BalraButton=new JButton("Bal");
		BalraButton.addActionListener(controller.new GombokActionListener());
		JobbraButton=new JButton("Jobb");
		JobbraButton.addActionListener(controller.new GombokActionListener());
		LepButton=new JButton("Lép");
		LepButton.addActionListener(controller.new GombokActionListener());
		korvegeButton=new JButton("Jöhet a következõ");
		korvegeButton.addActionListener(controller.new GombokActionListener());
		asasButton=new JButton("Ásás");
		asasButton.addActionListener(controller.new GombokActionListener());
	}
	
	/**
	 * panelek létrehozása
	 */
	public void setPanels() {
		jatekPanel=new JPanel();
		jatekPanel.setPreferredSize(new Dimension(900,50));
		jegmezoPanel=new JPanel() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void paintComponent(Graphics g) {
				for(int i=0;i<drawable.size();i++)
					drawable.get(i).draw((Graphics2D)g);
				for(int i=0;i<drawtargy.size();i++)
					drawtargy.get(i).draw((Graphics2D)g);
				for(int i=0;i<drawvedelem.size();i++)
					drawvedelem.get(i).draw((Graphics2D)g);
				for(int i=0;i<drawmaci.size();i++)
					drawmaci.get(i).draw((Graphics2D)g);
				for(int i=0;i<drawjatekos.size();i++)
					drawjatekos.get(i).draw((Graphics2D)g);
				for(int i=0;i<drawirany.size();i++)
					drawirany.get(i).draw((Graphics2D)g);
			}
		};
		jegmezoPanel.setPreferredSize(new Dimension(640,640));
		iranyPanel=new JPanel();
		iranyPanel.setPreferredSize(new Dimension(150,500));
		taskaPanel=new JPanel();
		taskaPanel.setPreferredSize(new Dimension(150,500));
		
		iranyPanel.add(asasButton);
		iranyPanel.add(FelveszButton);
		iranyPanel.add(KepessegButton);
		iranyPanel.add(JobbraButton);
		iranyPanel.add(BalraButton);
		iranyPanel.add(LepButton);
		iranyPanel.add(korvegeButton);
		
	
		taskaPanel.add(aktTaska);
		taskaPanel.add(HasznalButton);
		
		jatekPanel.add(testho);
		jatekPanel.add(munka);
		jatekPanel.add(hovihar);
		jatekPanel.add(tartokepesseg);
		
	}
	
	
	/**
	 * játték vége, nyertünk
	 */
	public void gameWon() {
		frame.dispose();
		menu.GameWon();
	}
	
	/**
	 * játék vége, vesztettünk
	 */
	public void gameLost() {
		frame.dispose();
		menu.GameLost();
	}
	
	
	/**
	 * @param j új táska felvétele
	 */
	public void AddTaska(JComboBox<Object> j) {
		taskak.add(j);
	}
	/**
	 * @param idx jelenlegi játékoshoz tartozó táska
	 */
	public void setAktTaska(int idx) {	
		taskaPanel.remove(aktTaska);
		aktTaska=taskak.get(idx);
		taskaPanel.add(aktTaska);
	}
	/**
	 * @return jelenleg beállított táska
	 */
	JComboBox<Object> getAktTaska() {
		return aktTaska;
	}
	/**
	 * @return az összes játékos táskája
	 */
	List<JComboBox<Object>> getTaskak() {
		return taskak;
	}
	/**
	 * @param d amit már nem kell kirajzolni
	 * drawable objektum eltávolítása, nem rajzoljuk ki többé
	 */
	public void eltavolitDrawable(Drawable d) {
		drawable.remove(d);
	}
	
	/**
	 * Kirajzolható játékost felveszi a drawjatekos listába 
	 * @param d - a felvevendõ kirajzolható játékos
	 */
	public void addDrawableJatekos(Drawable d) {
		drawjatekos.add(d);
	}
	
	/**
	 * Kirajzolható jegesmedvét felveszi a drawmaci listába 
	 * @param d - a felvevendõ kirajzolható jegesmedve
	 */
	public void addDrawableMaci(Drawable d) {
		drawmaci.add(d);
	}
	
	/**
	 * Kirajzolható Tárgyat felveszi a drawtargy listába 
	 * @param d - a felvevendõ kirajzolható tárgy
	 */
	public void addDrawableTargy(Drawable d) {
		drawtargy.add(d);
	}
	
	/**
	 * Kirajzolható Tárgyat eltávolítja a drawtargy listából 
	 * @param d - a törlendõ kirajzolható tárgy
	 */
	public void eltavolitDrawableTargy(Drawable d) {
		drawtargy.remove(d);
	}
	
	
	/**
	 * Eltávolítja az összes kirajzolható tárgyat a drawtargy listából
	 */
	public void eltavolitDrawableTargyAll() {
		drawtargy.clear();
	}
	
	/**
	 * Kirajzolható védelmet felveszi a drawvedelem listába 
	 * @param d - a felvevendõ kirajzolható védelem
	 */
	public void addDrawableVedelem(Drawable d) {
		drawvedelem.add(d);
	}
	
	/**
	 * Kirajzolható védelmet eltávolítja a drawvedelem listából 
	 * @param d - a törlendõ kirajzolható védelem
	 */
	public void eltavolitDrawableVedelem(Drawable d) {
		drawvedelem.remove(d);
	}
	
	/**
	 * Kirajzolható irányt felveszi a drawirany listába 
	 * @param d - a felvevendõ kirajzolható irány
	 */
	public void addDrawableIrany(Drawable d) {
		drawirany.add(d);
	}
	
	/**
	 * Eltávolítja az elsõ irányt a drawirany listából
	 */
	public void eltavolitDrawableIrany() {
		if(drawirany.size()>0)
			drawirany.remove(0);
	}
	
	/**
	 * @param n aktuális játékos testhõje
	 * kiírandó testhõ, az aktuális játékos testhõje
	 */
	public void setTestho(int n) {
		testho.setText("Játékos Testhõje: "+n);
	}
	/**
	 * @param n munkadb
	 * aktuális játékos munkái kiírása
	 */
	public void setMunka(int n) {
		munka.setText("Játékos Munkái: "+n);
	}
	
	/**
	 * Beállítja a tartóképesség szövegét
	 * @param n - a jégtábla tartóképessége
	 */
	public void setTartokepesseg(int n) {
		tartokepesseg.setText("\n Tábla tartóképessége: "+n);
	}
	
	
	/**
	 * Beállítja a hóviharig... kör van szövegét
	 * @param n - hány kör van a következõ hóviharig
	 */
	public void setHovihar(int n) {
		hovihar.setText("\n Hóviharig még: "+n+" kör van hátra.");
	}
	
}
