package Jegmezo;

import java.util.ArrayList;
import java.util.List;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Jégmezo.java
//  @ Date : 25/03/2020
//  @ Author : 
//
//





public class Jegmezo
{
	private int hoviharCnt;
	private List<Frissitheto> frissithetok;
	private List<Jatekos> jatekosok;
	private boolean VegeAjateknak;
	private boolean elsoKor;
	/**
	 * a konstruktor, ami létrehozza a Jégezõt
	 * @param hoviharCnt - kezdetben hány kör van a hóviharig
	 */
	public Jegmezo(int hoviharCnt)
	{
		this.hoviharCnt = hoviharCnt;
		frissithetok = new ArrayList<>();
		jatekosok = new ArrayList<>();
		VegeAjateknak = false;
		elsoKor = true;
		System.out.println("Letrehoztak egy jegmezot");
	}
	
	/**
	 * Felveszi a frissithetok közé a paraméterben megadott frissithetot
	 * @param f - a frissíthetõ, amit fel akarunk venni
	 */
	public void addFrissitheto(Frissitheto f)
	{
		
		frissithetok.add(f);
		System.out.println("Hozzáadtam a jégmezõhöz a frissithetot");
		
	}
	
	
	/**
	 * Felveszi a jatekosok koze a paraméterben megadott jatekost
	 * @param j - a jatekos, akit fel akarunk venni
	 */
	public void addJatekos(Jatekos j)
	{
		
		jatekosok.add(j);
		System.out.println("Hozzáadtam a jégmezõhöz a jatekost");
		
	}
	

	
	
	/**
	 * @param nyert  ha igaz értéket kap nyertünk, ha hamisat vesztettünk, a játéknak vége.
	 */
	public void jatekvege(boolean nyert)
	{
		System.out.println("Vege a jateknak");
		if(!nyert) 
			System.out.println("Sajnos vesztettetek.");
		else 
			System.out.println("Nyertetetek!");
		VegeAjateknak = true;
	}
	
	/**
	 * A frisiíthetõket frissíti, és ha a hóvihar számáló nullára vált meghívja a hóvihar függvényét 
	 * a frisiíthetõknek. És visszaállítja a hóvihar számálót
	 */
	public void leptet()
	{
		while(!VegeAjateknak)
		{
			if(!elsoKor)
			{
				System.out.println("Jegmezo: Uj kor kezdodott");
				hoviharCnt--;
				System.out.println("Jegemzo: Csokkent a hoviharig hatralevo korok szama");
				
				for(int i=0;i<frissithetok.size();i++) {
					System.out.println("Meghivja a jegmezo a frissithetokre a frissit fuggvenyt");
					frissithetok.get(i).frissit();
					if(hoviharCnt==0)
					{
						System.out.println("Jegmezo: Nulla kor van a hoviharig, ezert hovihar");
						frissithetok.get(i).hovihar();
						hoviharCnt = 4;
					}
				}
			}
			else
				elsoKor = false;
			
			System.out.println("Jegmezo: az ujabb hoviharig " + hoviharCnt + "db kor van hatra");
			
			for(int i = 0; i < jatekosok.size(); i++)
			{
				if(VegeAjateknak)
					break;
				
				jatekosok.get(i).KoreVan();
			}
		
		}
	}
	
	/**
	 * @param j ha meghalt egy játékos vége a játéknak, meghívja ezt a függvényt false értékkel
	 */
	public void meghalt(Jatekos j)
	{
		System.out.println("Egy jatekos meghalt rajtam, ezert most vege a jateknak");
		j.setTartAKore(false);
		this.jatekvege(false);
	}
	
	/**
	 * Megkonstruálja a jégmezõt a megadott paraméterekkel
	 * @param jegtablakSzamaSzelteben - hány jégtáblát tároljon a jégmezõ a vízszintes síkon
	 * @param jegtablakSzamaHosszaban - hány jégtáblát tároljon a jégmezõ a függõleges síkon
	 * @param eszkimokSzama - azt adja meg, hogy hány eszkimó legyen a jégemezõn, a sarrkkutatokSzama-val együtt nem haladhatja meg a tízet 
	 * @param sarrkkutatokSzama - azt adja meg, hogy hány sarkkutató legyen a jégemezõn, a eszkimokSzama-val együtt nem haladhatja meg a tízet 
	 */
	public void setup( int jegtablakSzamaSzelteben, int jegtablakSzamaHosszaban, int eszkimokSzama, int sarrkkutatokSzama)
	{
		System.out.println("A jegemzo, most egy jatekot hoz letre");
		Jegtabla jgk[][] = new Jegtabla[jegtablakSzamaHosszaban][jegtablakSzamaSzelteben];
		
		//incializaljuk a jegtablakat
		for(int i = 0; i < jegtablakSzamaHosszaban; i++)
		{
			for(int j = 0; j < jegtablakSzamaSzelteben; j++)
			{
				jgk[i][j] = new Jegtabla(this, false, 5, 2, 4); // TODO: itt majd randomizalni kell a homennyiseget, tartokepesseget es a targyat
			}
		}
		
		//(Jobb(0), Bal(1), Fel(2), Le(3))
		//ujra bejarjuk es beallitjuk a szomszedokat
		for(int i = 0; i < jegtablakSzamaHosszaban; i++)
		{
			for(int j = 0; j < jegtablakSzamaSzelteben; j++)
			{
					Jegtabla sz0 = j + 1 < jegtablakSzamaSzelteben? jgk[i][j + 1] : null;
					Jegtabla sz1 = j - 1 >= 0? jgk[i][j - 1] : null;
					Jegtabla sz2 = i - 1 >= 0? jgk[i - 1][j] : null;
					Jegtabla sz3 = i + 1 < jegtablakSzamaHosszaban? jgk[i + 1][j] : null;
					jgk[i][j].setSzomszed(sz0,0, 0);
					jgk[i][j].setSzomszed(sz1,1,180);
					jgk[i][j].setSzomszed(sz2, 2,90);
					jgk[i][j].setSzomszed(sz3, 3,270);
			}
		}
		
		for(int i = 0; i < eszkimokSzama; i++)
		{
			Eszkimo e = new Eszkimo(this, 4, 5);
			
			jgk[i/jegtablakSzamaSzelteben][i%jegtablakSzamaSzelteben].addJatekos(e);
			
		}
		
		for(int i = 0; i < sarrkkutatokSzama; i++)
		{
			Sarkkutato sk = new Sarkkutato(this, 4, 4);
			jgk[eszkimokSzama/jegtablakSzamaSzelteben + i/jegtablakSzamaSzelteben][eszkimokSzama%jegtablakSzamaSzelteben + i%jegtablakSzamaSzelteben].addJatekos(sk);
		}
		
			System.out.println("Jatek letrehozva");
	}
	
	/**
	 * Visszaadja, hogy mi ez az objektum
	 */
	public String toString()
	{
		return "Jegmezo";
	}
	
	public int getHoviharCnt()
	{
		return hoviharCnt;
	}
}
