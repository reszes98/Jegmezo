package Jegmezo;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Játékos.java
//  @ Date : 25/03/2020
//  @ Author : 
//
//

import java.util.ArrayList;
import java.util.List;

public abstract class Jatekos implements Frissitheto
{
	private Jegmezo jegmezo;
	protected Jegtabla aktjegtabla;
	private int jelzopisztolydb;
	protected int Munkadb;
	private int testho;
	private List<Targy> targyak;
	protected Irany iranyAmibeNez;
	
	
	/**
	 * Konstruktor, ami létrehozza a Játékost a medadott paraméterekkel
	 * @param jegmezo - a jégmezõ, amin a Játékos van
	 * @param jelzopisztolydb - a Játékos jelzõpisztoly darabjainak száma
	 * @param Munkadb - A Játékos hátralévõ elvégezhetõ munka száma
	 * @param testho - a Játékos hátralévõ testhõje
	 * @param targyak - a Játékos által tárolt tárgyak
	 * @param iranyAmibeNez - az Irany, amibe a Játékos néz
	 */
	public Jatekos(Jegmezo jegmezo,
	int jelzopisztolydb,
	int Munkadb,
	int testho,
	List<Targy> targyak,
	Irany iranyAmibeNez)
	{
		this.jegmezo = jegmezo;
		this.aktjegtabla = null;
		this.jelzopisztolydb = jelzopisztolydb;
		this.Munkadb = Munkadb;
		this.testho = testho;
		this.targyak = targyak;
		this.iranyAmibeNez = iranyAmibeNez;
		this.jegmezo.addFrissitheto(this);
		
		System.out.println("Valaki letrehozott egy jatekost");
	}
	
	
	/**
	 * A Játékos ás 1-et azon a Jégtáblán, amin áll
	 */
	public void asas()
	{
		System.out.println("En, a jatekos, kezzel asasra keszulok");
		
		boolean sikeres = aktjegtabla.asas(1);
		if(sikeres)
		{
			this.MunkaDBcsokkentese(1);
			System.out.println("Asas sikeresen elvegezve");
		}
		else
			System.out.println("Asas sikertelenul elvegezve");
		
	}
	
	
	/**
	 * @param i - i irányban lévõ szomszédos jégmezõre helyezi át a játékost.
	 * @return Visszaadja, hogy sikeres volt-e az áthelyezés
	 */
	public boolean athelyez(Irany i)
	{
		System.out.println("Valaki engem, a jatekost, epp at akar helyezni");
		Jegtabla szomszed = aktjegtabla.szomszedKerdez(i);
		if (szomszed!=null) {
			aktjegtabla.jatekosEltavolit(this);
			szomszed.ralep(this);
			System.out.println("Sikeresen athelyeztek");
			return true;
		}
		else 
		{
			System.out.println("Nem sikerult athelyezni engem");
			return false;
		}
	}
	
	public void kilep(Jegtabla j)
	{
	}
	
	/**
	 * @param i csökkenti a testhõt a megadott mennyiséggel
	 */
	public void fazas(int i)
	{
		System.out.println("Fazom ezert a testhom " + testho + "-rol " + (testho - i) + "-re csokkent");
		testho-=i;
		
		
		if(testho<=0) {
			System.out.println("Elfogyott minden testhom, ezert most meghalok");
			jegmezo.meghalt(this);
		}
		
	}
	
	/**
	 *Az új kör elején visszaállítjuk a Munkadb-jét 4-re
	 */
	public void frissit()
	{
		Munkadb = 4;
		System.out.println("Jatekoskent az uj kor elejen megint " + Munkadb + "db munkam van");
		
	}
	
	/**
	 * @return Visszaadja a Játékos iranyAmibeNez-ét
	 */
	public Irany getIranyAmibeNez()
	{
		System.out.println("Engem, mint jatekost, epp arrol kerdeznek, hogy merre nezek");
		return iranyAmibeNez;
	}
	
	
	/**
	 * ha nincs védelem a jégtáblán ahol van, akkor meghívja a fázás függvényt, ha a testhõje 0-ra 
	 * csökken meghal, ezt jelzi a jégmezõnek
	 */
	public void hovihar()
	{
		System.out.println("En, a jatekos, epp egy hoviharban vagyok");
		Vedelem  v = aktjegtabla.getjegtablaVedelme();
		
		
		if(v != null)
		{
			System.out.println("Jatekos: Van vedelem a tablan ezert meghivom a hovihar fuggvenyet");
			v.hovihar();
		}
		if(v == null) {
			System.out.println("Jatekos: Nincs vedelem a tablan");
			System.out.println("Durva ez a hovihar, most fazom");
			fazas(1);
		}
	}
	
	/**
	 * @return Visszaadja a Játékos által tárolt jelzõpisztoly darabok számát
	 */
	public int getjelzopisztolydb()
	{
		System.out.println("Jatekos vagyok es a jelzopisztolydb szamom irant erdeklodnek epp");
		return jelzopisztolydb;
	}
	
	/**
	 * Növeli eggyel a jelzopisztolydb-t.
	 */
	public void jelzopisztolyDarabokNovelese()
	{
		System.out.println("Nekem, a jatekosnak, epp noveltek a jelzopisztolyok darabszamat 1-el");
		jelzopisztolydb++;
	}
	
	public Jegtabla JegtablaLekerdez()
	{
		System.out.println("Jatekos vagyok es azt kerdezik melyik jegtablan allok");
		return aktjegtabla;
	}
	
	/**
	 * A játékos képessége, amit a leszármazottak valósítanak meg
	 */
	public abstract void kepesseg();
	
	
	/**
	 * Ezzel a függvénnyeltud majd lépni a játékos arra a jégtáblára, ami arra van, amerre néz
	 */
	public void lepes()
	{
		System.out.println("Jatekos vagyok es most probalok lepni egyet");
		boolean ellephet = aktjegtabla.ellep(this);
		
		if(ellephet)
		{
			Jegtabla szJegtabla = aktjegtabla.szomszedKerdez(iranyAmibeNez);
			if(szJegtabla != null )
			{
				szJegtabla.ralep(this);
				System.out.println("Sikerult az ellepes");
				MunkaDBcsokkentese(1);
			}
			else
			{
				System.out.println("Nem sikerult az ellepes, mert ebbe az iranyba nincs jegtabla");
			}
		}
		else {
			System.out.println("Nem sikerult az ellepes, mert nem lephetek el");
		}
		
	}
	
	
	
	/**
	 * Beállítja a játékost, hogy abba az irányba nézzen, amit megadunk
	 * @param i - Az irány, amibe szeretnénk, hogy nézzen a Játékos
	 */
	public void setIranyAmibeNez(Irany i)
	{
		System.out.println("Most epp a jatekos iranyAmibeNez tulajdonsagat allitjak");
		
		iranyAmibeNez = i;
	}
	
	
	
	/**
	 * Meghívja a megadott indexû tárgyra a használ függvényt
	 * @param idx - annak a Tárgynak az indexe, amit használni akarunk
	 */
	public void targyHasznalat(int idx)
	{
		System.out.println("A jatekos epp a " + idx + " indexu targyat probalja hasznalni");
		if(targyak != null)
		{
			if(targyak.size() > idx)
			{
				boolean sikeres = targyak.get(idx).hasznal(this);
				if(sikeres)
				{
					System.out.println("A targyhasznalat sikerult");
					this.MunkaDBcsokkentese(1);
				}
				else 
					System.out.println("A targy hasznalat nem sikerult");
			}
			else
			{
				System.out.println("A targy hasznalat nem sikerult, mert nincsenen ilyen indexu targya a jatekosnak");
			}
		}
		else
		{
			System.out.println("A targy hasznalat nem sikerult, mert nincsenek targyai a jatekosnak");
		}
			
	}
	
	/**
	 * Megpróbálja felvenni a tárgyat a jégtábláról, amin áll
	 */
	public void targyFelvetel()
	{
		System.out.println("A jatekos epp egy targyat probal felvenni a jegtablarol, amin all");
		boolean sikeres = aktjegtabla.targyFelvesz(this);
		if(sikeres)
		{
			System.out.println("A targyfelvetel sikerult");
			this.MunkaDBcsokkentese(1);
		}
		else
			System.out.println("A targyfelvetel nem sikerult");
		
	}
	
	/**
	 * @param t - tárgyat hozzáadja a játékos tárgyaihoz
	 */
	public boolean targyHozzadasa(Targy t)
	{
		if(targyak == null)
			targyak = new ArrayList<>();
		System.out.println("A jatekos targygyujtemenyehez epp egy targyat probalnak hozzaadni");
		targyak.add(t);
		System.out.println("Targy hozzaadva");
		return true;
	}
	
	/**
	 * Eltávolítja a paraméterben megadott tárgyat
	 * @param t - a tárgy, amit el akarunk távolítani
	 */
	public void targyEltavolitasa(Targy t)
	{
		System.out.println("A jatekos targygyujtemenyebol epp egy targyat probalnak eltavolitani");
		targyak.remove(t);
		System.out.println("Targy eltavolitva");
	}
	

	/**
	 * @param mennyivel - noveli a testhot ezzel az értékkel, de a testhõt 
	 * max 6-ig tudjuk növelni.
	 * @return visszatér azzal, hogy 
	 */
	public boolean testhoNovelese(int mennyivel)
	{
		System.out.println("Most epp a jatekos testhojet akarjak novelni");
		testho+= mennyivel;
		if (testho > 6) {
			testho=6;
			System.out.println(" Nem sikerult a noveles, mert a testhot 6-ig lehet csak növelni.");
			return false;
		}
		else
		{
			System.out.println("Testho sikeresen novelve");
			return true;
		}
	}
	
	/**
	 * csökkenti a megadott mennyiséggel a játékos munkaDB-jét
	 * Ha nullára csökken átadjuk a kört a következõ játékosnak
	 * @param mennyivel - mennyivel csökkentsük a MunkaDB-t
	 */
	public void MunkaDBcsokkentese(int mennyivel)
	{
		System.out.println("Most epp a jatekos munkadbjait probaljak csokkenteni");
		System.out.println("Munkadb csokkentve");
		if(Munkadb - mennyivel < 0)
		{
			Munkadb = 0;
			System.out.println("Elfogytak a munkaim ");
			
			System.out.println("ezert tovabbadom a korom");
			korVege();
		}
		else
		{
			Munkadb -= mennyivel;
		}
	}
	
	/**
	 * Akkor hívódik meg, ha nulára csökkent a Játékos Munkadb-je
	 */
	public void korVege()
	{
		System.out.println("a jatekos vegzett a korevel");
	}
	
	/**
	 * @return Visszaadja a jégmezõt, amin a játékos van
	 */
	public Jegmezo getJegmezo()
	{
		System.out.println("a jatekos jegmezojet kerdezik le epp");
		return jegmezo;
	}
	
	/**
	 * Átállítja a játékos aktjegtabla attribútumát
	 * @param jt - A jégtábla, amire át akarjuk állítani
	 */
	public void setaktjegtabla(Jegtabla jt)
	{
		System.out.println("a jatekosnak epp azt allitjak, hogy melyik jegtablan all");
		aktjegtabla  = jt;
	}
	
	
	/**
	 * Kilistázza a konzolra a játékos tárgyait
	 */
	public void TargyakListazasa()
	{
		if(targyak != null)
		{
			System.out.println("A jatekos targyai:");
			for(int i = 0; i < targyak.size(); i++)
				System.out.println((i + 1) + ". - " + targyak.get(i).toString() );
		}
		else
		{
			System.out.println("Nincsenek targyai a jatekosnak");
		}
		
	}
	
	
	/**
	 * Visszaadja, hogy mi ez az objektum
	 */
	public String toString()
	{
		return "Jatekos";
	}
	
	/**
	 * @return Visszaadja a játékos testhõjét
	 */
	public int getTestho()
	{
		return testho;
	}
	
	/**
	 * @return Visszaadja a játékos Munkadb attribútumát
	 */
	public int getMunkadb()
	{
		return Munkadb;
	}
	
}
