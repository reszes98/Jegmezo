package Jegmezo;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Játékos.java
//  @ Date : 25/03/2020
//  @ Author : 
//
//

import java.util.ArrayList;
import java.util.List;

public abstract class Jatekos implements Frissitheto
{
	private Jegmezo jegmezo;
	protected Jegtabla aktjegtabla;
	private int jelzopisztolydb;
	protected int Munkadb;
	private int testho;
	private List<Targy> targyak;
	
	protected int szogAmibeNez;
	
	
	public boolean tartAKore;
	
	
	/**
	 * Konstruktor, ami létrehozza a Játékost a medadott paraméterekkel
	 * @param jegmezo - a jégmezõ, amin a Játékos van
	 * @param jelzopisztolydb - a Játékos jelzõpisztoly darabjainak száma
	 * @param Munkadb - A Játékos hátralévõ elvégezhetõ munka száma
	 * @param testho - a Játékos hátralévõ testhõje
	 * @param targyak - a Játékos által tárolt tárgyak
	 * @param iranyAmibeNez - az Irany, amibe a Játékos néz
	 */
	public Jatekos(Jegmezo jegmezo,
	int Munkadb,
	int testho)
	{
		this.jegmezo = jegmezo;
		this.aktjegtabla = null;
		this.jelzopisztolydb = 0;
		this.Munkadb = Munkadb;
		this.testho = testho;
		this.targyak = new ArrayList<>();
		
		this.jegmezo.addFrissitheto(this);
		this.jegmezo.addJatekos(this);
		tartAKore = false;
		Global.out.println("Jatekos sikeresen letrehozva. Most van: "+jegmezo.GetJatekosSzam()+
				" jatekos. Munka db: "+Munkadb+" ,testho: "+testho);
	}
	
	
	/**
	 * A Játékos ás 1-et azon a Jégtáblán, amin áll
	 */
	public void asas()
	{
		
		if(Munkadb>0) {
			boolean sikeres = aktjegtabla.asas(1);
			if(sikeres)
			{
				this.MunkaDBcsokkentese(1);
				Global.out.print("Asas sikeresen elvegezve. ");
			}
			else
				Global.out.print("Asas nem sikerult. ");
		}
		
	}
	
	
	/**
	 * @param i - i irányban lévõ szomszédos jégmezõre helyezi át a játékost.
	 * @return Visszaadja, hogy sikeres volt-e az áthelyezés
	 */
	public boolean athelyez(int szogbe)
	{
		
		Jegtabla szomszed = aktjegtabla.szomszedKerdez(szogbe);
		if (szomszed!=null) {
			aktjegtabla.jatekosEltavolit(this);
			szomszed.ralep(this);
			Global.out.print("Jatekos sikeresen athelyezve");
			return true;
		}
		else 
		{
			Global.out.print("Nem sikerult athelyezni a jatekost");
			return false;
		}
	}
	
	
	
	
	/**
	 * @param i csökkenti a testhõt a megadott mennyiséggel
	 */
	public void fazas(int i)
	{
		
		testho-=i;
		Global.out.print("Testho sikeresen csokkentve. ");
		
		if(testho<=0) {
			Global.out.print("Elfogyott a jatekos testhoje. ");
			jegmezo.meghalt(this);
		}
		
	}
	
	/**
	 *Az új kör elején visszaállítjuk a Munkadb-jét 4-re
	 */
	public void frissit()
	{
		Munkadb = 4;
		Global.out.print("A jatekosnak "+Munkadb+ " munkaja van.");
		
	}
	
	
	
	
	/**
	 * ha nincs védelem a jégtáblán ahol van, akkor meghívja a fázás függvényt, ha a testhõje 0-ra 
	 * csökken meghal, ezt jelzi a jégmezõnek
	 */
	public void hovihar()
	{
		
		Vedelem  v = aktjegtabla.getjegtablaVedelme();
		
		
		if(v != null)
		{
			Global.out.print("A hovihar lezajlott, a jatekos megmenekult a hovihar elol. ");
			v.hovihar();
		}
		if(v == null) {
			Global.out.print("A hovihar lezajlott, a jatekos testhoje csokkent egyet. ");
			fazas(1);
		}
	}
	
	
	
	
	/**
	 * Növeli eggyel a jelzopisztolydb-t.
	 */
	public void jelzopisztolyDarabokNovelese()
	{
		
		jelzopisztolydb++;
		Global.out.print("JelzopisztolyDB-ok szama sikeresen novelve. ");
	}
	
	
	/**
	 * A játékos képessége, amit a leszármazottak valósítanak meg
	 */
	public abstract void kepesseg();
	
	
	
	
	
	/**
	 * Akkor fut amikor a játékos köre van. Megkérdezi a felhasználót, hogy mit akar tenni, amíg tart a köre
	 */
	public void KoreVan()
	{
		tartAKore = true;
		
		//what?
		/*while(tartAKore)
		{
			
		}*/
		
	}
	
	
	
	/**
	 * Akkor hívódik meg, ha nulára csökkent a Játékos Munkadb-je
	 */
	public void korVege()
	{
		Global.out.print("A jatekos vegzett a korevel. ");
		tartAKore = false;
	}
	
	
	/**
	 * Ezzel a függvénnyeltud majd lépni a játékos arra a jégtáblára, ami arra van, amerre néz
	 */
	public boolean lepes()
	{
		boolean ellephet=false;
		Jegtabla szJegtabla = aktjegtabla.szomszedKerdez(szogAmibeNez);
		if(szJegtabla != null ) {
			ellephet = aktjegtabla.ellep(this);
			Global.out.print("Van szomszed ebbe az iranyban.");
		}
		else
			Global.out.print("Nem sikerult az ellepes, mert ebbe az iranyba nincs jegtabla");
		
		if(ellephet)
		{
			
			String atfordulva=aktjegtabla.getAtVanFordulva() ? "at van fordulva" : "nincs atfordulva";
			Global.out.print("A jegtabla "+atfordulva+" .");
			if(szJegtabla != null )
			{
				szJegtabla.ralep(this);
				Global.out.print("Sikerult az ellepes. ");
				MunkaDBcsokkentese(1);
			}
			else
			{
				Global.out.print("Nem sikerult az ellepes, mert ebbe az iranyba nincs jegtabla");
				return false;
			}
		}
		else {
			Global.out.print("Nem sikerult az ellepes, mert a jegtabla at van fordulva. ");
			return false;
		}
		return true;
		
	}
	
	
	
	
	/**
	 * csökkenti a megadott mennyiséggel a játékos munkaDB-jét
	 * Ha nullára csökken átadjuk a kört a következõ játékosnak
	 * @param mennyivel - mennyivel csökkentsük a MunkaDB-t
	 */
	public void MunkaDBcsokkentese(int mennyivel)
	{
		
		if(Munkadb - mennyivel < 0)
		{
			Munkadb = 0;
			Global.out.print("Elfogytak a munkaim. ");
			
			korVege();
		}
		else
		{
			Munkadb -= mennyivel;
			Global.out.print("MunkaDB sikeresen csökkentve. ");
		}
	}
	
	
	
	
	/**
	 * @return Visszaadja a játékos aktjégtábla attribútumát
	 */
	public Jegtabla JegtablaLekerdez()
	{
		return aktjegtabla;
	}
	
	
	
	
	/**
	 * Eltávolítja a paraméterben megadott tárgyat
	 * @param t - a tárgy, amit el akarunk távolítani
	 */
	public void targyEltavolitasa(Targy t)
	{
		this.TargyakListazasa();
		targyak.remove(t);
		Global.out.print("Targy eltavolitva. ");
		this.TargyakListazasa();
		
	}
	
	/**
	 * Megpróbálja felvenni a tárgyat a jégtábláról, amin áll
	 */
	public boolean targyFelvetel()
	{
		Global.out.print(" A jatekos MunkaDB-ja: "+Munkadb+". ");
		boolean sikeres =false;
		if(Munkadb>0)
			sikeres = aktjegtabla.targyFelvesz(this);
		if(sikeres)
		{
			Global.out.print(" A targyfelvetel sikerult");
			this.MunkaDBcsokkentese(1);
		}
		else
			Global.out.print("A targyfelvetel nem sikerult");
		Global.out.print(" A jatekos MunkaDB-ja: "+Munkadb+". ");
		return sikeres;
	}
	
	
	/**
	 * Meghívja a megadott indexû tárgyra a használ függvényt
	 * @param idx - annak a Tárgynak az indexe, amit használni akarunk
	 */
	public boolean targyHasznalat(int idx)
	{
		Global.out.print("A jatekosnak MunkaDB-ja: "+Munkadb+". ");
		if(targyak != null && Munkadb>0)
		{
			if(targyak.size() > idx)
			{
				boolean sikeres = targyak.get(idx).hasznal(this);
				if(sikeres)System.out.println("igen");
				if(sikeres)
				{
					Global.out.print("A targyhasznalat sikerult. ");
					Munkadb--;
					return true;
				}
				else 
					Global.out.print("A targy hasznalat nem sikerult. ");
			}
			else
			{
				Global.out.print("A targy hasznalat nem sikerult, mert nincsenen ilyen indexu targya a jatekosnak. ");
			}
		}
		else
		{
			Global.out.print("A targy hasznalat nem sikerult, mert nincsenek targyai a jatekosnak, vagy nincs eleg munkaDB-ja. ");
		}
		Global.out.print("A jatekosnak MunkaDB-ja: "+Munkadb+". ");
		return false;
			
	}
	
	
	
	/**
	 * @param t - tárgyat hozzáadja a játékos tárgyaihoz
	 */
	public boolean targyHozzadasa(Targy t)
	{
		if(targyak == null)
			targyak = new ArrayList<>();
		
		targyak.add(t);
		Global.out.print("Targy hozzaadva. ");
		return true;
	}
	
	
	
	/**
	 * @param mennyivel - noveli a testhot ezzel az értékkel, de a testhõt 
	 * max 6-ig tudjuk növelni.
	 * @return visszatér azzal, hogy 
	 */
	public boolean testhoNovelese(int mennyivel)
	{
		Global.out.print("Jatekos testhoje: "+testho+". ");
		testho+= mennyivel;
		if (testho > 6) {
			testho=6;
			Global.out.print(" Nem sikerult a noveles, mert a testhot 6-ig lehet csak növelni.");
			Global.out.print("Jatekos testhoje: "+testho+". ");
			return false;
		}
		else
		{
			Global.out.print("Testho sikeresen novelve. ");
			Global.out.print("Jatekos testhoje: "+testho+". ");
			return true;
		}
	}
	
	
	
	/**
	 * @return Visszaadja a jégmezõt, amin a játékos van
	 */
	public Jegmezo getJegmezo()
	{
	
		return jegmezo;
	}
	
	/**
	 * Átállítja a játékos aktjegtabla attribútumát
	 * @param jt - A jégtábla, amire át akarjuk állítani
	 */
	public void setaktjegtabla(Jegtabla jt)
	{
		
		aktjegtabla  = jt;
	}
	
	
	/**
	 * Kilistázza a konzolra a játékos tárgyait
	 */
	public void TargyakListazasa()
	{
		if(targyak != null)
		{
			Global.out.print("A jatekos targyai: ");
			for(int i = 0; i < targyak.size(); i++)
				Global.out.println((i + 1) + ". - " + targyak.get(i).toString()+ " ");
		}
		else
		{
			Global.out.print("Nincsenek targyai a jatekosnak. ");
		}
		
	}
	
	
	/**
	 * Visszaadja, hogy mi ez az objektum
	 */
	public String toString()
	{
		return "Jatekos";
	}
	
	/**
	 * @return Visszaadja a játékos testhõjét
	 */
	public int getTestho()
	{
		return testho;
	}
	
	/**
	 * @return Visszaadja a játékos Munkadb attribútumát
	 */
	public int getMunkadb()
	{
		return Munkadb;
	}
	

	
	/**
	 * @return Visszaadja a Játékos iranyAmibeNez-ét
	 */
	/*public Irany getIranyAmibeNez()
	{
		System.out.println("Engem, mint jatekost, epp arrol kerdeznek, hogy merre nezek");
		return iranyAmibeNez;
	}*/
	
	/**
	 * @return Visszaadja a Játékos által tárolt jelzõpisztoly darabok számát
	 */
	public int getjelzopisztolydb()
	{
		
		return jelzopisztolydb;
	}
	
	
	/**
	 * Beállítja a játékost, hogy abba az irányba nézzen, amit megadunk
	 * @param i - Az irány, amibe szeretnénk, hogy nézzen a Játékos
	 */
	/*public void setIranyAmibeNez(Irany i)
	{
		System.out.println("Most epp a jatekos iranyAmibeNez tulajdonsagat allitjak");
		
		iranyAmibeNez = i;
	}*/
	
	public int getSzogAmibeNez()
	{
		return this.szogAmibeNez;
	}
	
	public void setSzogAmibeNez(int szog)
	{
		this.szogAmibeNez = szog;
		
	}
	
	public void Fordul(boolean Jobbra)
	{
		
		szogAmibeNez = aktjegtabla.adottSzogbeLevoSzomszedMellettiSzomszedSzoge(szogAmibeNez, Jobbra);
		
	}
	
	
	/** Beállítja a megadott értékre a játékos tartAKore attribútumát
	 * @param tk - az érték, amire a játékos tartAKore attribútumát állítani szeretnénk
	 */
	public void setTartAKore(boolean tk)
	{
		tartAKore = tk;
	}
	
	public List<Targy> getTargyak()
	{
		return targyak;
	}
	
}
