package Jegmezo;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Jégtábla.java
//  @ Date : 25/03/2020
//  @ Author : 
//
//

import java.util.List;

public class Jegtabla implements Frissitheto
{
	private boolean atVanFordulva;
	private int ho;
	private int tartokepesseg;
	private List<Jegtabla> szomszedok;
	private boolean vanRajtaIglu;
	private List<Jatekos> jatekosok;
	private Targy targy;
	
	
	/**
	 * Csökkenti a Jégtábla hó mennyiségét i-vel, ha nulla alá megy a hó, akkor -1-re állítjuk a hómennyiséget és a rajta lévõ tárgyat kiásottnak tekintjük.
	 * Ha -1 vagy az alatti a hó mennyiség nem történik semmi
	 * @param i - A mennyiség, amivel a havat csökkenteni szeretnénk
	 * @return Visszaadja, hogy történt-e ásás
	 */
	public boolean asas(int i)
	{
		if(ho >= 0)
		{
			ho -= i;
			if(ho < -1)
				ho = -1;
			
			return true;
		}
		else
			return false;
		
	}
	
	/**
	 * Visszafordítja a táblát
	 */
	public void visszaFordit()
	{
		atVanFordulva = false;
		System.out.println("A jegtabla visszafordult");
	}
	
	/**
	 * Átfordítja a táblát
	 */
	public void atfordit()
	{
		atVanFordulva = true;
		System.out.println("Jaj! Felfordult a tábla!");
	}
	
	/**
	 * Azt adja meg, hogy a Játekos elhagyhatja-e a Jégtáblát 
	 * @param j - Am játékos aki el akarja hagyni a Jégtáblát
	 * @return Visszaadja, hogy a Játékos elhagyhatja-e a Jégtáblát
	 */
	public boolean ellep(Jatekos j)
	{
		if(getAtVanEFordulva())
		{
			System.out.println("A jegtabla at van fordulva, a jatekos csak buvarruhaval hagyhatja el");
			return false;
		}
		else
		{
			this.jatekosEltavolit(j);
			System.out.println("A jatekos elhagyhatja a jegtablat");
			return true;
		}
	}
	
	public void frissit()
	{
	}
	
	/**
	 * @return Visszaadja, hogy hány játékost bír el a Jégtábla
	 */
	public int gettartokepesseg()
	{
		return tartokepesseg;
	}
	
	/**
	 * növeli a havat a jégtáblán
	 */
	public void hoNovelese()
	{
		ho++;
		System.out.println("Ho mennyisege megnovelve");
	}
	
	
	/**
	 *meghívja a honoveles fügvényt
	 */
	public void hovihar()
	{
		this.hoNovelese();
	}
	
	/**
	 * Épít egy iglut magára, ha már nincs rajta egy iglu
	 * @return Visszatér azzal, hogy építetet-e iglut magára
	 */
	public boolean iglutEpit()
	{
		if(vanRajtaIglu)
			return false;
		else
		{
			vanRajtaIglu = true;
			return true;
		}
	}
	
	/**
	 * Eltávolítja paraméterben megadott játékost a jégtábla játékosai közül
	 * @param j - A Játékos, akit el akarunk távolítni
	 */
	public void jatekosEltavolit(Jatekos j)
	{
		jatekosok.remove(j);
		System.out.println("Jatekos eltavolitva a tablarol");
		/*if(jatekosok.size() <= tartokepesseg)
			visszaFordit();*/
	}
	
	public List<Jatekos> jatekosokLekerdez()
	{
		return jatekosok;
	}
	
	/**
	 * Rálépteti a megadott játékost a táblára és ha játékosok száma így meghaladja a tartóképességet, átfordítja a táblát
	 * @param j - A Játékos, aki rálép a táblára 
	 */
	public void ralep(Jatekos j)
	{
		jatekosok.add(j);
		System.out.println("A jatekos ralepett a tablara");
		
		if(jatekosok.size() > tartokepesseg)
			atfordit();
			
	}
	
	/**
	 * visszaadja a jégtábla i irányban lévõ szomszédját 
	 * @param i - az irány amibe tudni szeretnénk a szomszédot
	 * @return visszaadja az i irányban lévõ szomszédot
	 */
	public Jegtabla szomszedKerdez(Irany i)
	{
		int idx = 0;
		//(Jobb(0), Bal(1), Fel(2),Le(3))
		switch(i) {
			case Jobb:
				idx = 0;
				break;
			case Bal:
				idx = 1;
				break;
			case Fel:
				idx = 2;
				break;
			default:
				idx = 3;
				break;
		}
			
		return szomszedok.get(idx);
	}
	
	
	/**
	 * Meghívja a rajtalévõ tárgy felvesz függvényét, ha a hó rajta -1
	 * @param j - a Játékos, aki fel akarja venni a tárgyat
	 * @return Visszaadja, hogy sikeres volt-e a tárgyfelvétel
	 */
	public boolean targyFelvesz(Jatekos j)
	{
		if(ho == -1)
		{
			if(targy != null)
			{
				boolean sikeres =  targy.felvesz(j);
				if(sikeres)
				{
					System.out.println("A jegtablarol valo targy felvetel sikeres volt");
					targy = null; // töröljük a tárgyat a tábláról
				}
				
				else 
					System.out.println("A jegtablarol valo targy felvetel nem volt sikeres");
				
				
				return sikeres;
			}
			else
			{
				System.out.println("A jegtablan nincs targy");
				return false;
			}
		
		}
		else
		{
			System.out.println("A jegtablan levo targyat meg ho takarja");
			return false;
		}
	}
	
	/**
	 * @return visszaadja, hogy van e iglu a jégtáblán
	 */
	public boolean VanRajtaIgluLekerdez()
	{
		return vanRajtaIglu;
	}
	
	
	/**
	 * @return Visszaadja, hogy a jégtábla át van-e fordulva
	 */
	public boolean getAtVanEFordulva()
	{
		return atVanFordulva;
	}
}
