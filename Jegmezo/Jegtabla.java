package Jegmezo;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Jégtábla.java
//  @ Date : 25/03/2020
//  @ Author : 
//
//

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import java.util.TreeMap;

public class Jegtabla implements Frissitheto
{
	private Jegmezo jegmezo;
	private boolean atVanFordulva;
	private int ho;
	private int tartokepesseg;
	
	private TreeMap<Integer, Integer> szomszedokSorszambolSzogge;
	private TreeMap<Integer, Integer> szomszedokSzogbolSorszamma;
	private List<Jegtabla> szomszedokASorszamhoz;
	
	private int szomszedokSzama;
	
	private Vedelem jegtablaVedelme;
	private List<Jatekos> jatekosok;
	private List<Jegesmedve> jegesmedvek;
	private Targy targy;
	
	public String ID;
	
	
	/**
	 * A jégtábla konstruktora, ami létrehozza jégtáblát, a megadott paraméterekkel
	 * @param jegmezo - A jégmezõ, amin van
	 * @param atVanFordulva - azt adja meg, hogy át van-e fordulva
	 * @param ho - a kezdeti hómennyiséget adja meg
	 * @param tartokepesseg - a tartóképességét adja meg
	 * @param targy - a benne lévõ tárgyat adja meg. Ha nincs benne tárgy, akkor null legyen az értéke
	 */
	public Jegtabla(Jegmezo jegmezo,
	boolean atVanFordulva,
	int ho,
	int tartokepesseg,
	int szomszedokSzama)
	{
		this.jegmezo = jegmezo;
		
		this.atVanFordulva =atVanFordulva;
		this.ho = ho;
		this.tartokepesseg = tartokepesseg;
		
		this.szomszedokSzama = szomszedokSzama;
		
		szomszedokSorszambolSzogge = new TreeMap<>(); 
		szomszedokSzogbolSorszamma = new TreeMap<>(); 
		
		szomszedokASorszamhoz  = new ArrayList<>(this.szomszedokSzama);
	
		for(int i  = 0; i < this.szomszedokSzama; i++)
			szomszedokASorszamhoz.add(null);
		
		jegtablaVedelme = null;
		
		jatekosok = new ArrayList<>(); 
		this.targy = null;
		this.jegmezo.addFrissitheto(this);
		jegesmedvek = new ArrayList<>();
		
		Global.out.print("Jegtabla siekresen letrehozva. ");
	}
	
	
	public Jegtabla(String id,
			Jegmezo jegmezo,
			boolean atVanFordulva,
			int ho,
			int tartokepesseg,
			int szomszedokSzama)
			{
		ID = id;
				this.jegmezo = jegmezo;
				
				this.atVanFordulva =atVanFordulva;
				this.ho = ho;
				this.tartokepesseg = tartokepesseg;
				
				this.szomszedokSzama = szomszedokSzama;
				
				szomszedokSorszambolSzogge = new TreeMap<>(); 
				szomszedokSzogbolSorszamma = new TreeMap<>(); 
				
			
				szomszedokASorszamhoz = new ArrayList<>(this.szomszedokSzama);
			
				for(int i  = 0; i < this.szomszedokSzama; i++)
					szomszedokASorszamhoz.add(null);
				
				jegtablaVedelme = null;
				
				jatekosok = new ArrayList<>(); 
				this.targy = null;
				this.jegmezo.addFrissitheto(this);
				jegesmedvek = new ArrayList<>();
				
				Global.out.print("Jegtabla sikeresen letrehozva. ");
			}
	
	
	/**
	 * Felveszi a játékost a táblára és átállítja az aktjegtabla attribútumát
	 * @param j - a játékos, akit hozzá akarunk adni a táblához
	 * @return visszaadja, hogy sikerült-e felvenni a játékost a jégtáblára
	 */
	public void addJatekos(Jatekos j)
	{
		
			Global.out.print("A jegtablan "+jatekosok.size()+" jatekos all. ");
			j.setaktjegtabla(this);
			if(this.szomszedokSorszambolSzogge.get(0) != null)
				j.setSzogAmibeNez(this.szomszedokSorszambolSzogge.get(0));
			else
				j.setSzogAmibeNez(0);
			jatekosok.add(j);
			Global.out.print("Jatekos sikeresen hozzaadva a jegtablahoz. ");
			Global.out.print("A jegtablan "+jatekosok.size()+" jatekos all. ");
	}
	
	/**
	 * Hozzáadja a paraméterben megadott jegesmedvét a jégtáblához és beállítja a jegesmedbe jegtablaAminAll attribútumát
	 * @param j - A jegesmedve, akot hozzá akarunk adni a Jégáblához
	 */
	public void addJegesmedve(Jegesmedve j)
	{
			Global.out.print("A jegtablan "+jegesmedvek.size()+" jatekos all. ");
			j.setjegtablaAminAll(this);
			j.setSzogAmibeNez(this.szomszedokSorszambolSzogge.get(0));
			jegesmedvek.add(j);
			Global.out.print("Jegesmedve siekresen hozzaadva a jegtablahoz. ");
			Global.out.print("A jegtablan "+jegesmedvek.size()+" jatekos all. ");
	}
	
	/**
	 * Csökkenti a Jégtábla hó mennyiségét i-vel, ha nulla alá megy a hó, akkor -1-re állítjuk a hómennyiséget és a rajta lévõ tárgyat kiásottnak tekintjük.
	 * Ha -1 vagy az alatti a hó mennyiség nem történik semmi
	 * @param i - A mennyiség, amivel a havat csökkenteni szeretnénk
	 * @return Visszaadja, hogy történt-e ásás
	 */
	public boolean asas(int i)
	{
		Global.out.print("A ho mennyisege a jegtablan: "+ho+" .");
		if(ho >= 0)
		{
			int tempHo = ho;
			
			ho -= i;
			if(ho <= -1)
			{
				ho = -1;
			}
			Global.out.print("A ho mennyisege a jegtablan: "+ho+" .");
			return true;
		}
		else
		{
			Global.out.print(" Nincs ho a jegtablan, nem sikerult az asas. A hoszint maradt: " + ho);
			return false;
		}
		
		
	}
	

	
	/**
	 * Átfordítja a táblát és törli a rajta lévõ védelmet
	 */
	public void atfordit()
	{
		atVanFordulva = true;
		this.jegtablaVedelme = null;
		Global.out.print("Jegtabla atfordult. ");
	}
	
	
	/**
	 * Azt adja meg, hogy a Játekos elhagyhatja-e a Jégtáblát 
	 * @param j - Am játékos aki el akarja hagyni a Jégtáblát
	 * @return Visszaadja, hogy a Játékos elhagyhatja-e a Jégtáblát
	 */
	public boolean ellep(Jatekos j)
	{
		
		if(atVanFordulva)
		{
			Global.out.print("A jegtabla at van fordulva, ellepes siekrtelen. ");
			return false;
		}
		else
		{
			this.jatekosEltavolit(j);
			Global.out.print("A jatekos sikeresen ellepett. ");
			return true;
		}
	}

	
	
	/**
	 * Új kör elején megnézi, hogy át van-e fordulva és ha igen és vannak rajta játékosok, akkor szól a jégmezõnek, 
	 * hogy ezek a játékosok meghaltak.
	 * Ha át van fordulva és nincs rajta senki akkor visszafordítjuk a jégtáblát
	 * Meghívja a rajtalévõ védelem frissites függvényét
	 */
	public void frissit()
	{	
		Global.out.print("A jegtabla tartokepessege: "+tartokepesseg+
				" , a rajta levo jateksok szama: "+ jatekosok.size()+", a vedelme: "+
				jegtablaVedelme.toString()+". ");
		if(jegtablaVedelme != null)
			jegtablaVedelme.frissit();
		
		
		if(atVanFordulva) {
			Global.out.print("Jegtabla at van fordulva. ");
			for(int i = 0; i < jatekosok.size(); i++)
			{
				
				jegmezo.meghalt(jatekosok.get(i));
			}
				
		
			if(jatekosok.size() == 0)
			{
				Global.out.print("Jegtabla sikeresen visszafordulva. ");
				visszaFordit();
			}
		}
		
		String vedelem = jegtablaVedelme == null? "Semmi": jegtablaVedelme.toString();
		Global.out.print("Jegtabla sikeresen frissitve. ");
		Global.out.print("A jegtabla tartokepessege: "+tartokepesseg+
				" , a rajta levo jateksok szama: "+ jatekosok.size()+", a vedelme: "+
				vedelem +". ");
	}
	


	
	/**
	 * növeli a havat a jégtáblán
	 */
	public void hoNovelese()
	{
		
		ho++;
		Global.out.print("Ho mennyisege siekresen megnovelve. ");
	}
	
	
	/**
	 *meghívja a honoveles fügvényt
	 */
	public void hovihar()
	{
		Global.out.print("A tablan levo ho: "+ho+". ");
		if(jegtablaVedelme==null)
		{
			
			this.hoNovelese();
		}
		else {
			jegtablaVedelme.hovihar();
		}
		Global.out.print("A tablan levo ho: "+ho+". ");
		
	}
	

	
	
	/**
	 * Eltávolítja paraméterben megadott játékost a jégtábla játékosai közül
	 * @param j - A Játékos, akit el akarunk távolítni
	 */
	public void jatekosEltavolit(Jatekos j)
	{
		
		jatekosok.remove(j);
		Global.out.print("Jatekos siekresen eltavolitva a tablarol. ");
	}
	
	

	
	public List<Jatekos> jatekosokLekerdez()
	{
		
		return jatekosok;
	}
	
	
	
	/**
	 * Eltávolítja a paraméterben megadott jegesmedvét a jégtábláról
	 * @param j - A jegesmedve, akit el akarunk távolítani a Jégtábláról
	 */
	public void JegesmedveEltavolit(Jegesmedve j)
	{
		
		jegesmedvek.remove(j);
		Global.out.print("Jegesmedve sikeresen eltavolitva a tablarol. ");
	}
	
	
	/**
	 * Eltávolítja a Jégtáblán lévõ védelmet
	 */
	public void jegtablaVedelmenekEltavolitasa()
	{
		
		jegtablaVedelme = null;
		Global.out.print("Jegtabla vedelme sikeresen eltavolitva. ");
	}
	
	
	/**
	 * Rálépteti a megadott játékost a táblára és ha játékosok száma így meghaladja a tartóképességet, átfordítja a táblát
	 * @param j - A Játékos, aki rálép a táblára 
	 */
	public void ralep(Jatekos j)
	{
		
		j.setaktjegtabla(this);
		j.setSzogAmibeNez(this.szomszedokSorszambolSzogge.get(0));
		jatekosok.add(j);
		Global.out.print("A jegtablahoz a jatekos sikeresen hozzaadva. ");
		
		
		if(jatekosok.size() > tartokepesseg)
			atfordit();
			
	}
	

	
	/**
	 * visszaadja a jégtábla i irányban lévõ szomszédját 
	 * @param i - az irány amibe tudni szeretnénk a szomszédot
	 * @return visszaadja az i irányban lévõ szomszédot
	 */
	//Új
	public Jegtabla szomszedKerdez(Integer szogbe)
	{
		
		//int idx = 0;
		//(Jobb(0), Bal(1), Fel(2),Le(3))
		/*switch(i) {
			case Jobb:
				idx = 0;
				break;
			case Bal:
				idx = 1;
				break;
			case Fel:
				idx = 2;
				break;
			default:
				idx = 3;
				break;
		}*/
		return this.szomszedokASorszamhoz.get(this.szomszedokSzogbolSorszamma.get(szogbe));
	}
	
	//Új
	public Integer adottSzogbeLevoSzomszedMellettiSzomszedSzoge(Integer szog, boolean jobbra)
	{
		Integer sorszam = this.szomszedokSzogbolSorszamma.get(szog);
		if(jobbra)
		{
			
			Integer jobbraLevoSzomszedSorszama = sorszam == szomszedokSzama - 1? 0: sorszam + 1;
			
			return this.szomszedokSorszambolSzogge.get(jobbraLevoSzomszedSorszama);
				
		}
		else
		{
			Integer balraLevoSzomszedSorszama = sorszam == 0? szomszedokSzama - 1: sorszam - 1;
			return this.szomszedokSorszambolSzogge.get(balraLevoSzomszedSorszama);
		}
	}
	
	
	
	/**
	 * Meghívja a rajtalévõ tárgy felvesz függvényét, ha a hó rajta -1
	 * @param j - a Játékos, aki fel akarja venni a tárgyat
	 * @return Visszaadja, hogy sikeres volt-e a tárgyfelvétel
	 */
	public boolean targyFelvesz(Jatekos j)
	{
		Global.out.print("A jegtablan levo ho mennyisege: "+ho+". ");
		if(ho == -1)
		{
			if(targy != null)
			{
				boolean sikeres =  targy.felvesz(j);
				if(sikeres)
				{
					Global.out.print("A jegtablarol valo targy felvetel sikeres volt. ");
					targy = null; // töröljük a tárgyat a tábláról
				}
				
				else 
					Global.out.print("A jegtablarol valo targy felvetel nem volt sikeres. ");
				
				
				return sikeres;
			}
			else
			{
				Global.out.print("A jegtablan nincs targy. ");
				return false;
			}
		
		}
		else
		{
			Global.out.print("A jegtablan levo targyat meg ho takarja. ");
			return false;
		}
	}
	
	
	/**
	 * Visszafordítja a táblát
	 */
	public void visszaFordit()
	{
		atVanFordulva = false;
		Global.out.print("A jegtabla sikeresen visszafordult. ");
	}
	
		
	
	/**
	 * @return Visszaadja, hogy a jégtábla át van-e fordulva
	 */
	public boolean getAtVanFordulva()
	{
		
		return atVanFordulva;
	}
	
	
	
	
	/**
	 * @return Visszadja a jegtabla homennyiseget
	 */
	public int getHo()
	{
		
		return ho;
	}
	
	

	/**
	 * @return Visszaadja a jégtáblán lévõ védelmet vagy nullt, ha nincs rajta védelem
	 */
	public Vedelem getjegtablaVedelme()
	{
		
		return jegtablaVedelme;
	}
	
	
	
	/**
	 * @return Visszaadja, hogy hány játékost bír el a Jégtábla
	 */
	public int gettartokepesseg()
	{
		
		return tartokepesseg;
	}
	

	/**
	 * Beállítja a jégtábla védelmét a megadott Védelemre
	 * @param v - A védelem, amit be akarunk állítani a Jégtáblára
	 */
	public void setjegtablaVedelme(Vedelem v)
	{
		if(jegtablaVedelme!=null)
			Global.out.print("A jegtabla vedelme: "+jegtablaVedelme.toString()+". ");
		else
			Global.out.print("A jegtablan nincs vedelem. ");
		v.setJegtablaAminVan(this);
		
		jegtablaVedelme = v;
		Global.out.print("A jegtabla vedelme sikeresen atallitva. ");
		Global.out.print("A jegtabla vedelme: "+jegtablaVedelme.toString()+". ");
	}

	/**
	 * Hozzáadja a megadott irányú szomszédaihoz a megadott jégtáblát
	 * @param j - a jégtábla, amit fel akarunk venni a szomszédok közé
	 * @param i - azt adja meg, hogy a jégtáblának melyik irányba lesz a szomszédja
	 */
	public void setSzomszed(Jegtabla j, Integer hanyadikSzomszed, Integer melyikSzogbol)
	{
		
		
		szomszedokSorszambolSzogge.put(hanyadikSzomszed, melyikSzogbol);
		szomszedokSzogbolSorszamma.put(melyikSzogbol, hanyadikSzomszed);
		
		szomszedokASorszamhoz.add(hanyadikSzomszed, j);
		
		//(Jobb(0), Bal(1), Fel(2),Le(3))
		/*switch(i) {
			case Jobb:
				idx = 0;
				break;
			case Bal:
				idx = 1;
				break;
			case Fel:
				idx = 2;
				break;
			default:
				idx = 3;
				break;
		}
			
		szomszedok.set(idx, j);*/
		Global.out.print("Szomszed sikeresen beallitva. ");
	}
	
	
	/**
	 * Átállítja a jégtábla tárgyát a megadott tárgyra
	 * @param t - a tárgy, amire át akarjuk állítani
	 */
	public void setTargy(Targy t)
	{
		
		targy = t;
		Global.out.print("A jegtablahoz a targy sikeresen at lett allitva. ");
	}
	
	/**
	 * Visszaadja, hogy mi ez az objektum
	 */
	public String toString()
	{
		return "Jegtabla";
	}
	
	public int getJatekosokSzama()
	{
		if(this.jatekosok != null)
			return this.jatekosok.size();
		else
			return 0;
	}
	
	public Targy getTargy()
	{
		return this.targy;
	}
	
	public int getSzomszedokSzama()
	{
		return szomszedokSzama;
	}
	

}
